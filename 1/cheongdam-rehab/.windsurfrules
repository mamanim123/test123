답변은 한글로해줘
프로그램을 만들때는 한글이 지원되는 인코딩으로 만들어줘
너는 MCP를 사용할 수 있어.
다음 예시들을 살펴보고 적절히 활용해줘.

Node.js & Git
{ "tool": "terminal", "parameters": { "cmd": "npm install express" } }
{ "tool": "terminal", "parameters": { "cmd": "node server.js" } }
{ "tool": "terminal", "parameters": { "cmd": "git clone https://github.com/user/repo.git" } }

text-editor 사용 방법
// ──── ① 한 줄 교체 ─────────────────────────
// src/app.js 42번째 줄의 “foo”를 “bar”로 바꾼다.
{ "tool": "text-editor",
  "parameters": {
    "action": "replace",
    "file":   "src/app.js",
    "startLine": 42,
    "endLine":   42,
    "newText": "console.log('bar');"
  }
}

// ──── ② 여러 줄 추가(120~130) ────────────────
{ "tool": "text-editor",
  "parameters": {
    "action": "append",
    "file":   "utils.py",
    "startLine": 120,          // 120번째 줄 뒤에 삽입
    "newText": "# helper fn\\n"
             + "def slugify(text):\\n"
             + "    return text.lower().replace(' ', '-')\\n"
  }
}

// ──── ⑤ 터미널 래퍼(라인 편집) ────────────────
{ "tool": "terminal",
  "parameters": {
    "cmd": "edit src/index.html line 15"
  }
}

// ──── ⑥ 터미널 래퍼(디렉터리 목록) ───────────
{ "tool": "terminal",
  "parameters": {
    "cmd": "list components"
  }
}

파이썬 개발 도구
{ "tool": "terminal", "parameters": { "cmd": "python --version" } }
{ "tool": "terminal", "parameters": { "cmd": "pip install requests" } }
{ "tool": "terminal", "parameters": { "cmd": "pipx install black" } }
{ "tool": "terminal", "parameters": { "cmd": "pipenv install" } }
{ "tool": "terminal", "parameters": { "cmd": "poetry add numpy" } }
{ "tool": "terminal", "parameters": { "cmd": "pytest tests/" } }
{ "tool": "terminal", "parameters": { "cmd": "tox" } }
{ "tool": "terminal", "parameters": { "cmd": "flake8 src/" } }
{ "tool": "terminal", "parameters": { "cmd": "pylint module.py" } }
{ "tool": "terminal", "parameters": { "cmd": "black ." } }
{ "tool": "terminal", "parameters": { "cmd": "isort ." } }
{ "tool": "terminal", "parameters": { "cmd": "mypy app.py" } }
{ "tool": "terminal", "parameters": { "cmd": "coverage run -m pytest" } }
{ "tool": "terminal", "parameters": { "cmd": "python -m cProfile script.py" } }
{ "tool": "terminal", "parameters": { "cmd": "pyinstrument script.py" } }

 기타 유틸리티
{ "tool": "terminal", "parameters": { "cmd": "ls -la" } }
{ "tool": "terminal", "parameters": { "cmd": "dir" } }

Playwright MCP Server 사용 예시
페이지 열기
{ "tool":"playwright","parameters":{"action":"goto","url":"https://example.com"}} ,
로그인 버튼 클릭
{ "tool":"playwright","parameters":{"action":"click","selector":"#login-button"}} ,
검색어 입력 후 엔터
{ "tool":"playwright","parameters":{"action":"fill","selector":"input[name='q']","text":"MCP Server"}} ,
{ "tool":"playwright","parameters":{"action":"press","selector":"input[name='q']","key":"Enter"}} ,
페이지 스크린샷 저장
{ "tool":"playwright","parameters":{"action":"screenshot","path":"search-results.png"}} ,
콘솔 에러 로그 수집
{ "tool":"playwright","parameters":{"action":"getConsoleLogs"}} ,
네트워크 요청 내역 수집
{ "tool":"playwright","parameters":{"action":"getNetworkRequests"}} ,
JS 평가(페이지 타이틀 가져오기)
{ "tool":"playwright","parameters":{"action":"evaluate","expression":"document.title"}} ,
접근성 스냅샷(구조화된 DOM)
{ "tool":"playwright","parameters":{"action":"accessibilitySnapshot"}}
라이브러리 버전 조회
{ "tool": "context7", "parameters": {"query": "axios 최신 버전 알려줘"}}
패키지 목록 검색
{ "tool": "context7", "parameters": {"query": "lodash 사용법 예시"}}

"openai-gpt-image-mcp" 사용 방법

### 이미지 신규 생성 ###
{ 
  "tool": "create-image",
  "parameters": {
    "text": "일몰의 미래 도시 스카이라인",
    "n": 1,
    "size": "1024x1024",
    "output_format": "png"
  }
}

###### create-image 옵션 ######
text (string, 필수) : 생성할 이미지의 설명(프롬프트)입니다 
n (number, 1–10) : 한 번에 생성할 이미지 개수입니다 
size (string) : 이미지 해상도를 지정합니다. 예: 1024x1024, 1792x1024, 1024x1536 
quality (string) : 이미지 화질을 low/medium/high 중 하나로 지정합니다 
background (string) : 배경 유형을 transparent 또는 opaque로 설정합니다 
background_color (string, 선택) : 배경 색상을 16진수(hex) 코드로 지정할 수 있습니다 
output_format (string) : 출력 파일 형식을 png, jpeg, webp 중 하나로 지정합니다 
output_compression (number, 0–100) : 이미지 압축 품질을 0(무압축)부터 100(최대압축) 사이에서 설정합니다 
output (string) : 응답 방식을 base64 또는 file_output으로 지정합니다. 기본적으로 1 MB 미만은 base64, 초과 시 자동 전환됩니다 
file_output (string, 선택) : output: "file_output"일 때 저장할 절대 경로를 지정합니다 
file_output은 C:\\MYCLAUDE_PROJECT\\sonheungmin\\img\\beautiful_flower.png 인 경우, /mnt/c/MYCLAUDE_PROJECT/sonheungmin/img/beautiful_flower.png로 할것
생성된 이미지가  file://\tmp\openai_image_1746442458674.png 이곳에 저장된 경우, move로 옮길것
생성된 이미지가 base64인 경우, 이미지 파일로 변환하여 저장할 것 (파워셀을 이용할 것: 
[IO.File]::WriteAllBytes(
  'C:\절대\경로\이미지.png',
  [Convert]::FromBase64String($b64String)
)
)

### edit-image (이미지 편집)  
{ 
  "tool": "edit-image",
  "parameters": {
    "images": ["/tmp/original.png"],
    "prompt": "고양이 머리에 황금 후광 추가",
    "mask": "/tmp/cat_mask.png",
    "n": 1
  }
}

###### edit-image 옵션 ######

images (string[], 필수) : 편집할 원본 이미지 경로 또는 base64 인코딩 문자열 배열입니다 
prompt (string, 필수) : 이미지에 적용할 편집 설명(프롬프트)입니다 
mask (string, 선택) : 편집할 영역을 지정하는 마스크 이미지(투명 영역 편집) 경로 또는 base64입니다 
n (number, 1–10) : 반환할 편집 이미지 개수입니다 
size (string) : 결과 이미지 해상도를 지정합니다 
model (string) : 사용할 모델 이름입니다. 기본값은 gpt-image-1 
quality (string) : 이미지 화질을 low/medium/high 중 하나로 지정합니다 
output_format (string) : 출력 파일 형식을 png, jpeg, webp 중 하나로 지정합니다 
output_compression (number, 0–100) : 이미지 압축 품질을 0부터 100 사이로 설정합니다 
output (string) : 응답 방식을 base64 또는 file_output으로 지정하며, 1 MB 초과 시 자동 전환됩니다 
file_output (string, 선택) : output: "file_output"일 때 저장할 절대 경로를 지정합니다 
file_output은 C:\\MYCLAUDE_PROJECT\\sonheungmin\\img\\beautiful_flower.png 인 경우, /mnt/c/MYCLAUDE_PROJECT/sonheungmin/img/beautiful_flower.png로 할것
생성된 이미지가  file://\tmp\openai_image_1746442458674.png 이곳에 저장된 경우, move로 옮길것
생성된 이미지가 base64인 경우, 이미지 파일로 변환하여 저장할 것 (파워셀을 이용할 것: 
[IO.File]::WriteAllBytes(
  'C:\절대\경로\이미지.png',
  [Convert]::FromBase64String($b64String)
)
)

다음 지침을 지켜줘.

1. 프로젝트 루트 폴더는 Z:\html 야. 폴더 및 파일 생성 & 수정은 Z:\test2 폴더에 대해 진행해줘.
2. Z:\test2은 다음 웹사이트에 대한 루트 폴더야:  http://mcp4o.dothome.co.kr
3. http://mcp4o.dothome.co.kr에 들어가면 Z:\test2\index.html 페이지 내용이 뜨게 돼.
4. 작업이 진행될 때마다, 그에 맞게 docs/project_plan.md 파일을 업데이트해줘.
5. 소스들이 많아 꼭 필요한 파일들만 읽은 후, 편집 또는 추가로 진행해줘. 
6.  파일을 write할 때에는 3개~5개의 섹션으로 나누어 먼저 하나 write하고 나머지는 edit로 추가해줘. 파일을 edit 할때에는 3개~5개의 섹션으로 나누어 순차적으로 하나씩 진행해줘.
7. docs 폴더에 파일을 업데이트하거나 생성할 때, 꼭 필요한 내용만 넣어서 용량을 줄여줘.
8. 먼저 project_plan.md를 작성하고 작업 진행될때마다 업데이트해줘.
9. playwright로 접속해 사이트 조사할 때에는 DOM 구조를 먼저 확인한 후, 그에 맞게 클릭, 내용 보기를 진행해줘. 그리고 특정 웹페이지가 나오면 먼저 텍스트 박스와 버튼이나 링크가 있는지 살펴보고 필요하면 이것저것 눌러서 진행해봐.
10. filesystem의 edit_file과 write_file은 사용 금지야. edit하거나 write할때에는 text-editor를 써야 해.
11. 웹 자료 검색 시, google search를 한 후, 이에 기반해 playwright 브라우징을 해줘.
12. text-editer로 str_replace를 진행할 때는 old_str를 고유한 문자열이 되도록 충분히 길게 해줘.